edition: 1.0.0
name: ex_cms
access: "cefso"

vars: # 全局变量
  region: "ap-southeast-1"
  service:
    name: "ex_cms-github"
    description: 'Serverless Devs Web Framework Service'
#    logConfig: # log配置，function产生的log会写入这里配置的logstore
#      project: aliyun-fc-ap-southeast-1-6d80325d-3441-59fa-8a0f-80c806010d4e # loghub中的project名称
#      logstore: function-log # loghub中的logstore名称
#      enableRequestMetrics: true # RequestMetrics开关，取值true/false
#      enableInstanceMetrics: true # InstanceMetrics开关，取值true/false
#      logBeginRule: DefaultRegex # 日志是否切分，取值 DefaultRegex/None

services:
  framework: # 业务名称/模块名称
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    #    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
    #      pre-deploy: # 在deploy之前运行
    #        - run: pip3 install -r requirements.txt -t . # 要执行的系统命令，类似于一种钩子的形式
    #          path: ./code # 执行系统命令/钩子的路径
    props: # 组件的属性值
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "alert"
        description: 'Serverless Devs Web Framework Function'
        codeUri: './code'
        runtime: python3.10
        environmentVariables:
          FLASK_ENV: ${env(FLASK_ENV)}
          ROBOT_APP_SECRET: ${env(ROBOT_APP_SECRET)}
          SQLALCHEMY_DATABASE_URI: ${env(SQLALCHEMY_DATABASE_URI)}
        handler: app.app
        memorySize: 256
        timeout: 60
        layers:
          - acs:fc:ap-southeast-1:1010965047472573:layers/flask/versions/5
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: '/*'
